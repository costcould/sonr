// Code generated by protoc-gen-go-cosmos-orm. DO NOT EDIT.

package didv1

import (
	context "context"
	ormlist "cosmossdk.io/orm/model/ormlist"
	ormtable "cosmossdk.io/orm/model/ormtable"
	ormerrors "cosmossdk.io/orm/types/ormerrors"
)

type AuthenticatorTable interface {
	Insert(ctx context.Context, authenticator *Authenticator) error
	Update(ctx context.Context, authenticator *Authenticator) error
	Save(ctx context.Context, authenticator *Authenticator) error
	Delete(ctx context.Context, authenticator *Authenticator) error
	Has(ctx context.Context, id string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id string) (*Authenticator, error)
	List(ctx context.Context, prefixKey AuthenticatorIndexKey, opts ...ormlist.Option) (AuthenticatorIterator, error)
	ListRange(ctx context.Context, from, to AuthenticatorIndexKey, opts ...ormlist.Option) (AuthenticatorIterator, error)
	DeleteBy(ctx context.Context, prefixKey AuthenticatorIndexKey) error
	DeleteRange(ctx context.Context, from, to AuthenticatorIndexKey) error

	doNotImplement()
}

type AuthenticatorIterator struct {
	ormtable.Iterator
}

func (i AuthenticatorIterator) Value() (*Authenticator, error) {
	var authenticator Authenticator
	err := i.UnmarshalMessage(&authenticator)
	return &authenticator, err
}

type AuthenticatorIndexKey interface {
	id() uint32
	values() []interface{}
	authenticatorIndexKey()
}

// primary key starting index..
type AuthenticatorPrimaryKey = AuthenticatorIdIndexKey

type AuthenticatorIdIndexKey struct {
	vs []interface{}
}

func (x AuthenticatorIdIndexKey) id() uint32             { return 0 }
func (x AuthenticatorIdIndexKey) values() []interface{}  { return x.vs }
func (x AuthenticatorIdIndexKey) authenticatorIndexKey() {}

func (this AuthenticatorIdIndexKey) WithId(id string) AuthenticatorIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type authenticatorTable struct {
	table ormtable.Table
}

func (this authenticatorTable) Insert(ctx context.Context, authenticator *Authenticator) error {
	return this.table.Insert(ctx, authenticator)
}

func (this authenticatorTable) Update(ctx context.Context, authenticator *Authenticator) error {
	return this.table.Update(ctx, authenticator)
}

func (this authenticatorTable) Save(ctx context.Context, authenticator *Authenticator) error {
	return this.table.Save(ctx, authenticator)
}

func (this authenticatorTable) Delete(ctx context.Context, authenticator *Authenticator) error {
	return this.table.Delete(ctx, authenticator)
}

func (this authenticatorTable) Has(ctx context.Context, id string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this authenticatorTable) Get(ctx context.Context, id string) (*Authenticator, error) {
	var authenticator Authenticator
	found, err := this.table.PrimaryKey().Get(ctx, &authenticator, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &authenticator, nil
}

func (this authenticatorTable) List(ctx context.Context, prefixKey AuthenticatorIndexKey, opts ...ormlist.Option) (AuthenticatorIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return AuthenticatorIterator{it}, err
}

func (this authenticatorTable) ListRange(ctx context.Context, from, to AuthenticatorIndexKey, opts ...ormlist.Option) (AuthenticatorIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return AuthenticatorIterator{it}, err
}

func (this authenticatorTable) DeleteBy(ctx context.Context, prefixKey AuthenticatorIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this authenticatorTable) DeleteRange(ctx context.Context, from, to AuthenticatorIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this authenticatorTable) doNotImplement() {}

var _ AuthenticatorTable = authenticatorTable{}

func NewAuthenticatorTable(db ormtable.Schema) (AuthenticatorTable, error) {
	table := db.GetTable(&Authenticator{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Authenticator{}).ProtoReflect().Descriptor().FullName()))
	}
	return authenticatorTable{table}, nil
}

type KeyshareTable interface {
	Insert(ctx context.Context, keyshare *Keyshare) error
	Update(ctx context.Context, keyshare *Keyshare) error
	Save(ctx context.Context, keyshare *Keyshare) error
	Delete(ctx context.Context, keyshare *Keyshare) error
	Has(ctx context.Context, id string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id string) (*Keyshare, error)
	List(ctx context.Context, prefixKey KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error)
	ListRange(ctx context.Context, from, to KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error)
	DeleteBy(ctx context.Context, prefixKey KeyshareIndexKey) error
	DeleteRange(ctx context.Context, from, to KeyshareIndexKey) error

	doNotImplement()
}

type KeyshareIterator struct {
	ormtable.Iterator
}

func (i KeyshareIterator) Value() (*Keyshare, error) {
	var keyshare Keyshare
	err := i.UnmarshalMessage(&keyshare)
	return &keyshare, err
}

type KeyshareIndexKey interface {
	id() uint32
	values() []interface{}
	keyshareIndexKey()
}

// primary key starting index..
type KeysharePrimaryKey = KeyshareIdIndexKey

type KeyshareIdIndexKey struct {
	vs []interface{}
}

func (x KeyshareIdIndexKey) id() uint32            { return 0 }
func (x KeyshareIdIndexKey) values() []interface{} { return x.vs }
func (x KeyshareIdIndexKey) keyshareIndexKey()     {}

func (this KeyshareIdIndexKey) WithId(id string) KeyshareIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type keyshareTable struct {
	table ormtable.Table
}

func (this keyshareTable) Insert(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Insert(ctx, keyshare)
}

func (this keyshareTable) Update(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Update(ctx, keyshare)
}

func (this keyshareTable) Save(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Save(ctx, keyshare)
}

func (this keyshareTable) Delete(ctx context.Context, keyshare *Keyshare) error {
	return this.table.Delete(ctx, keyshare)
}

func (this keyshareTable) Has(ctx context.Context, id string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this keyshareTable) Get(ctx context.Context, id string) (*Keyshare, error) {
	var keyshare Keyshare
	found, err := this.table.PrimaryKey().Get(ctx, &keyshare, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &keyshare, nil
}

func (this keyshareTable) List(ctx context.Context, prefixKey KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return KeyshareIterator{it}, err
}

func (this keyshareTable) ListRange(ctx context.Context, from, to KeyshareIndexKey, opts ...ormlist.Option) (KeyshareIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return KeyshareIterator{it}, err
}

func (this keyshareTable) DeleteBy(ctx context.Context, prefixKey KeyshareIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this keyshareTable) DeleteRange(ctx context.Context, from, to KeyshareIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this keyshareTable) doNotImplement() {}

var _ KeyshareTable = keyshareTable{}

func NewKeyshareTable(db ormtable.Schema) (KeyshareTable, error) {
	table := db.GetTable(&Keyshare{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Keyshare{}).ProtoReflect().Descriptor().FullName()))
	}
	return keyshareTable{table}, nil
}

type ProofTable interface {
	Insert(ctx context.Context, proof *Proof) error
	Update(ctx context.Context, proof *Proof) error
	Save(ctx context.Context, proof *Proof) error
	Delete(ctx context.Context, proof *Proof) error
	Has(ctx context.Context, id string) (found bool, err error)
	// Get returns nil and an error which responds true to ormerrors.IsNotFound() if the record was not found.
	Get(ctx context.Context, id string) (*Proof, error)
	List(ctx context.Context, prefixKey ProofIndexKey, opts ...ormlist.Option) (ProofIterator, error)
	ListRange(ctx context.Context, from, to ProofIndexKey, opts ...ormlist.Option) (ProofIterator, error)
	DeleteBy(ctx context.Context, prefixKey ProofIndexKey) error
	DeleteRange(ctx context.Context, from, to ProofIndexKey) error

	doNotImplement()
}

type ProofIterator struct {
	ormtable.Iterator
}

func (i ProofIterator) Value() (*Proof, error) {
	var proof Proof
	err := i.UnmarshalMessage(&proof)
	return &proof, err
}

type ProofIndexKey interface {
	id() uint32
	values() []interface{}
	proofIndexKey()
}

// primary key starting index..
type ProofPrimaryKey = ProofIdIndexKey

type ProofIdIndexKey struct {
	vs []interface{}
}

func (x ProofIdIndexKey) id() uint32            { return 0 }
func (x ProofIdIndexKey) values() []interface{} { return x.vs }
func (x ProofIdIndexKey) proofIndexKey()        {}

func (this ProofIdIndexKey) WithId(id string) ProofIdIndexKey {
	this.vs = []interface{}{id}
	return this
}

type proofTable struct {
	table ormtable.Table
}

func (this proofTable) Insert(ctx context.Context, proof *Proof) error {
	return this.table.Insert(ctx, proof)
}

func (this proofTable) Update(ctx context.Context, proof *Proof) error {
	return this.table.Update(ctx, proof)
}

func (this proofTable) Save(ctx context.Context, proof *Proof) error {
	return this.table.Save(ctx, proof)
}

func (this proofTable) Delete(ctx context.Context, proof *Proof) error {
	return this.table.Delete(ctx, proof)
}

func (this proofTable) Has(ctx context.Context, id string) (found bool, err error) {
	return this.table.PrimaryKey().Has(ctx, id)
}

func (this proofTable) Get(ctx context.Context, id string) (*Proof, error) {
	var proof Proof
	found, err := this.table.PrimaryKey().Get(ctx, &proof, id)
	if err != nil {
		return nil, err
	}
	if !found {
		return nil, ormerrors.NotFound
	}
	return &proof, nil
}

func (this proofTable) List(ctx context.Context, prefixKey ProofIndexKey, opts ...ormlist.Option) (ProofIterator, error) {
	it, err := this.table.GetIndexByID(prefixKey.id()).List(ctx, prefixKey.values(), opts...)
	return ProofIterator{it}, err
}

func (this proofTable) ListRange(ctx context.Context, from, to ProofIndexKey, opts ...ormlist.Option) (ProofIterator, error) {
	it, err := this.table.GetIndexByID(from.id()).ListRange(ctx, from.values(), to.values(), opts...)
	return ProofIterator{it}, err
}

func (this proofTable) DeleteBy(ctx context.Context, prefixKey ProofIndexKey) error {
	return this.table.GetIndexByID(prefixKey.id()).DeleteBy(ctx, prefixKey.values()...)
}

func (this proofTable) DeleteRange(ctx context.Context, from, to ProofIndexKey) error {
	return this.table.GetIndexByID(from.id()).DeleteRange(ctx, from.values(), to.values())
}

func (this proofTable) doNotImplement() {}

var _ ProofTable = proofTable{}

func NewProofTable(db ormtable.Schema) (ProofTable, error) {
	table := db.GetTable(&Proof{})
	if table == nil {
		return nil, ormerrors.TableNotFound.Wrap(string((&Proof{}).ProtoReflect().Descriptor().FullName()))
	}
	return proofTable{table}, nil
}

type StateStore interface {
	AuthenticatorTable() AuthenticatorTable
	KeyshareTable() KeyshareTable
	ProofTable() ProofTable

	doNotImplement()
}

type stateStore struct {
	authenticator AuthenticatorTable
	keyshare      KeyshareTable
	proof         ProofTable
}

func (x stateStore) AuthenticatorTable() AuthenticatorTable {
	return x.authenticator
}

func (x stateStore) KeyshareTable() KeyshareTable {
	return x.keyshare
}

func (x stateStore) ProofTable() ProofTable {
	return x.proof
}

func (stateStore) doNotImplement() {}

var _ StateStore = stateStore{}

func NewStateStore(db ormtable.Schema) (StateStore, error) {
	authenticatorTable, err := NewAuthenticatorTable(db)
	if err != nil {
		return nil, err
	}

	keyshareTable, err := NewKeyshareTable(db)
	if err != nil {
		return nil, err
	}

	proofTable, err := NewProofTable(db)
	if err != nil {
		return nil, err
	}

	return stateStore{
		authenticatorTable,
		keyshareTable,
		proofTable,
	}, nil
}
